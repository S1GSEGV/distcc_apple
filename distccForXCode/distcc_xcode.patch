Index: src/arg.c
===================================================================
--- src/arg.c	(revision 791)
+++ src/arg.c	(working copy)
@@ -211,8 +211,17 @@
             } else if (!strcmp(a, "-frepo")) {
                 rs_log_info("compiler will emit .rpo files; must be local");
                 return EXIT_DISTCC_FAILED;
-            } else if (str_startswith("-x", a)) {
-                rs_log_info("gcc's -x handling is complex; running locally");
+            } else if (str_startswith("-x", a)
+                       && ((argv[i+1] == NULL)//just "-x" run local
+                           || (argv[i+1]//should handle "-x c++" etc.
+                               && !str_startswith("c", argv[i+1])
+                               && !str_startswith("c++", argv[i+1])
+                               && !str_startswith("objective-c", argv[i+1])
+                               && !str_startswith("objective-c++", argv[i+1])
+                               )
+                           )
+                       ) {
+                rs_log_info("gcc's -x handling is complex; running locally for %s", argv[i+1] ? argv[i+1] : "empty");
                 return EXIT_DISTCC_FAILED;
             } else if (str_startswith("-dr", a)) {
                 rs_log_info("gcc's debug option %s may write extra files; "
Index: src/implicit.c
===================================================================
--- src/implicit.c	(revision 791)
+++ src/implicit.c	(working copy)
@@ -67,6 +67,17 @@
  * moment, and may never be.  If you need that level of control, using a
  * different invocation method is recommended.
  **/
+int scan_args_for_linker(char *argv[])
+{
+	char *a;
+	int i;
+	for (i = 0; (a = argv[i]); i++) {
+		if (str_startswith("-Xlinker", a)){
+                return 1;
+        }
+    }
+    return 0;
+}
 
 
 /**
@@ -93,7 +104,15 @@
 
         /* change "distcc -c foo.c" -> "cc -c foo.c" */
         free((*out_argv)[0]);
-        (*out_argv)[0] = strdup("cc");
+        
+        if (scan_args_for_linker(argv)) {
+            (*out_argv)[0] = strdup("clang++");
+        }
+        else{
+            (*out_argv)[0] = strdup("clang");
+        }
+            
+        
         if ((*out_argv)[0] == NULL) {
           return EXIT_OUT_OF_MEMORY;
         }
